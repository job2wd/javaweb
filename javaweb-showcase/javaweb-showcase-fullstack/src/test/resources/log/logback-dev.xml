<?xml version="1.0" encoding="UTF-8"?>
<!-- 配置为若更改了该文件，则重新加载配置，每30秒执行一次扫描 -->
<!-- 
注意：
  logback 在启动时，会先查找 logback-test.xml 文件，然后查找 logback.xml，导致在测试时始终使用该文件。
   若使用 maven 命令打包后部署到服务器或使用 maven 命令启动服务器，则 logback 使用 logback.xml 文件。
 -->
<configuration scan="true" scanPeriod="30 seconds" debug="false">
  <property name="LOG_HOME" value="../logs/logback/javaweb-showcase-server" />
  <property name="LOG_FILE_NAME_PREFIX" value="javaweb-showcase-server" />
  <property name="LOG_FILE_NAME" value="${LOG_FILE_NAME_PREFIX}.log" />
  <property name="contextName" value="javaweb-showcase-server" />

  <contextName>meap-sso-server</contextName>
  
  <!-- 输出到控制台 -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger:%line] - %message%n</pattern>
    </encoder>
  </appender>

  <!-- 输出到日志文件（按照指定大小和指定文件格式备份）for DEBUG -->
  <appender name="FILE.ROLLING.DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/debug/${LOG_FILE_NAME}</file>
    
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">     
      <fileNamePattern>${LOG_HOME}/debug/${LOG_FILE_NAME_PREFIX}_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>

    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss} %-5level [%logger:%line] - %message%n</pattern>
    </encoder>
  </appender>
  
  <!-- 输出到日志文件（按照指定大小和指定文件格式备份）for INFO -->
  <appender name="FILE.ROLLING.INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/info/${LOG_FILE_NAME}</file>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">      
      <fileNamePattern>${LOG_HOME}/info/${LOG_FILE_NAME_PREFIX}_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>

    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss} %-5level [%logger:%line] - %message%n</pattern>
    </encoder>
  </appender>
  
  <!-- 输出到日志文件（按照指定大小和指定文件格式备份）for WARN -->
  <appender name="FILE.ROLLING.WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/warn/${LOG_FILE_NAME}</file>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">      
      <fileNamePattern>${LOG_HOME}/warn/${LOG_FILE_NAME_PREFIX}_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>WARN</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>

    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss} %-5level [%logger:%line] - %message%n</pattern>
    </encoder>
  </appender>
  
  <!-- 输出到日志文件（按照指定大小和指定文件格式备份）for ERROR -->
  <appender name="FILE.ROLLING.ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/error/${LOG_FILE_NAME}</file>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">      
      <fileNamePattern>${LOG_HOME}/error/${LOG_FILE_NAME_PREFIX}_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>

    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>

    <encoder>
      <pattern>%date{yyyy-MM-dd HH:mm:ss} %-5level [%logger:%line] - %message%n</pattern>
    </encoder>
  </appender>

  <!-- 输出到日志文件（按照指定大小和指定文件格式备份）for ALL -->
  <appender name="FILE.ROLLING.ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/${LOG_FILE_NAME}</file>

    <!-- 如果是 true，日志被追加到文件结尾；如果是 false，清空现存文件，默认是true。 -->
    <append>false</append>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- rollover daily -->
      <!-- 
      <fileNamePattern>${LOG_HOME}/${LOG_FILE_NAME_PREFIX}_%d{yyyy-MM-dd}.%i.log</fileNamePattern> 
      -->      
      <fileNamePattern>${LOG_HOME}/${LOG_FILE_NAME_PREFIX}_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- or whenever the file size reaches 100MB -->
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 备份文件保留365天 -->
      <maxHistory>365</maxHistory>
    </rollingPolicy>

    <!-- 
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
      <fileNamePattern>tests.%i.log.zip</fileNamePattern>
      <minIndex>1</minIndex>
      <maxIndex>3</maxIndex>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <maxFileSize>5MB</maxFileSize>
    </triggeringPolicy>
     -->
     
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>DEBUG</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    
    <!-- 
    ch.qos.logback.classic.filter.ThresholdFilter 过滤掉低于指定级别的日志
        如：过滤掉 TRACE 和 DEBUG 级别的日志 
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">   
      <level>INFO</level>   
    </filter>
    -->
    
    <!-- 
        默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator
        例如：过滤掉所有日志消息中不包含“billing”字符串的日志。
    <filter class="ch.qos.logback.core.filter.EvaluatorFilter">         
      <evaluator>
        <expression>return message.contains("billing");</expression>   
      </evaluator>   
      <OnMatch>ACCEPT </OnMatch>  
      <OnMismatch>DENY</OnMismatch>  
    </filter>
     -->

    <encoder>
      <pattern>${contextName} %date{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger:%line] - %message%n</pattern>
    </encoder>
  </appender>

  <root level="DEBUG">
    <appender-ref ref="STDOUT" />
    <appender-ref ref="FILE.ROLLING.DEBUG" />
    <appender-ref ref="FILE.ROLLING.INFO" />
    <appender-ref ref="FILE.ROLLING.WARN" />
    <appender-ref ref="FILE.ROLLING.ERROR" />
    <appender-ref ref="FILE.ROLLING.ALL" />
  </root>

</configuration>