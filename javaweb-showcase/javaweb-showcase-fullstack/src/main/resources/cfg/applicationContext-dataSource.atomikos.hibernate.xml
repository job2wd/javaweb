<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
  <description>
          该配置为多数据源配置，使用 Atomikos 和 JTA，支持分布式事务控制，持久层使用 Hibernate 实现。
          注意：
       1. 若在不同数据源之间执行操作，则可以完美使用事务控制提交，如：使用注解 @Transactional！
       2. 目前    Atomikos 的实现只针对 Mysql 数据库！
  </description>

  <!-- 使用 Annotation 定义事务 -->   
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />   
  <tx:jta-transaction-manager />
  
  <bean id="dataBase_conf" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" lazy-init="true">
    <property name="pinGlobalTxToPhysicalConnection" value="true" />
    <property name="user" value="${conf.jdbc.username}" />
    <property name="password" value="${conf.jdbc.password}" />
    <property name="url" value="${conf.jdbc.url}?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true" />
  </bean>

  <bean id="dataBase_data" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" lazy-init="true">
    <property name="pinGlobalTxToPhysicalConnection" value="true" />
    <property name="user" value="${data.jdbc.username}" />
    <property name="password" value="${data.jdbc.password}" />
    <property name="url" value="${data.jdbc.url}?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true" />
  </bean>

  <bean id="dataSource_conf" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="dataSource_conf" />
    <property name="xaDataSource" ref="dataBase_conf" />
    <property name="poolSize" value="5" />
    <property name="maxPoolSize" value="10"/>
    <property name="maxLifetime" value="3600"/><!-- 3600 seconds(1hour) -->
    <property name="testQuery" value="SELECT 1" />
  </bean>

  <bean id="dataSource_data" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="dataSource_data" />
    <property name="xaDataSource" ref="dataBase_data" />
    <property name="poolSize" value="5" />
    <property name="maxPoolSize" value="10"/>
    <property name="maxLifetime" value="3600"/><!-- 3600 seconds(1hour) -->
    <property name="testQuery" value="SELECT 1" />
  </bean>

  <bean id="baseSessionFactory" abstract="true">
    <property name="packagesToScan" value="org.javaweb.showcase.**" />
    <property name="namingStrategy">
      <bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
        <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
        <prop key="hibernate.dialect">${hibernate.dialect}</prop><!-- org.hibernate.dialect.MySQL5InnoDBDialect -->
        <prop key="ibernate.generate_statistics">false</prop>
        <prop key="ibernate.hbm2ddl.auto">update</prop><!-- create/create-drop/update -->
        <prop key="hibernate.max_fetch_depth" >5</prop>
        <prop key="hibernate.jdbc.fetch_size" >50</prop>
        <prop key="hibernate.jdbc.batch_size" >0</prop>
        <!-- 
        <prop key="hibernate.default_schema" >fba_conf</prop>
        <prop key="hibernate.default_catalog" >fba_conf</prop>         
         -->
        <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
        
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <prop key="hibernate.cache.use_structured_entries">true</prop>
        <prop key="hibernate.cache.generate_statistics">false</prop>
        <!-- 设置二级缓存的前缀名称 -->
        <prop key="hibernate.cache.region_prefix">quality.cache.memcached</prop>
        <!-- org.hibernate.cache.ehcache.EhCacheRegionFactory 
             net.sf.ehcache.hibernate.EhCacheRegionFactory 
             org.hibernate.cache.internal.NoCachingRegionFactory
             com.googlecode.hibernate.memcached.MemcachedRegionFactory
        -->
        <prop key="h4m.adapter.class"></prop>
        <prop key="h4m.expiry.seconds"></prop>
        <prop key="h4m.timestamper.class"></prop>
        <!-- kr.pe.kwonnam.hibernate4memcached.Hibernate4MemcachedRegionFactory -->
        <!-- com.googlecode.hibernate.memcached.MemcachedRegionFactory -->
        <!-- org.javaweb.showcase.web.cache.memcached.xmemcached.XMemcachedRegionFactory -->
        <prop key="hibernate.cache.region.factory_class">org.javaweb.showcase.cache.memcached.xmemcached.XMemcachedRegionFactory</prop>        
        <!-- org.hibernate.cache.EhCacheProvider -->
        <!-- net.sf.ehcache.hibernate.EhCacheProvider -->        
        <prop key="hibernate.cache.provider_class">com.googlecode.hibernate.memcached.MemcachedCacheProvider</prop>
        <!-- Default operation timeout in milliseconds -->
        <!-- https://code.google.com/p/hibernate-memcached/wiki/Configuration -->
        <prop key="hibernate.memcached.operationTimeout">6000</prop>
        <prop key="hibernate.memcached.memcacheClientFactory">net.rubyeye.xmemcached.utils.hibernate.XmemcachedClientFactory</prop>
        <prop key="hibernate.memcached.servers">${memcached.address}</prop>
        
        <prop key="hibernate.search.lucene_version">LUCENE_CURRENT</prop>        
        <!-- 命名规则 my_name->MyName 为何此处加了不起作用？但作为 sessionFactory 的参数 namingStrategy 却起作用 -->
        <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
      </props>
    </property>
  </bean>
  
  <bean id="sessionFactory_conf" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" parent="baseSessionFactory">
    <property name="dataSource" ref="dataSource_conf" />
  </bean>
  
  <bean id="sessionFactory_data" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" parent="baseSessionFactory">
    <property name="dataSource" ref="dataSource_data" />
  </bean>
  
  <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
    <property name="forceShutdown" value="false" />
    <property name="transactionTimeout" value="5" />
  </bean>

  <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.J2eeUserTransaction">
    <property name="transactionTimeout" value="5" />
  </bean>

  <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"
        depends-on="atomikosTransactionManager,atomikosUserTransaction">
    <property name="transactionManager" ref="atomikosTransactionManager" />
    <property name="userTransaction" ref="atomikosUserTransaction" />
    <property name="allowCustomIsolationLevels" value="true" />
  </bean>
  
  <!-- JSR303 Validator定义 -->
  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

</beans>