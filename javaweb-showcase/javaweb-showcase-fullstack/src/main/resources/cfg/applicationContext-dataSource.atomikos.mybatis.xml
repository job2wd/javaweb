<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
  <description>
          该配置为多数据源配置，使用 Atomikos 和 JTA，支持分布式事务控制，持久层使用 Mybatis 实现。
          
    (该实现目前有问题，两个数据源之间无法切换或自动匹配！！！！)
    
          注意：
       1. 若在不同数据源之间执行操作，则可以完美使用事务控制提交，如：使用注解 @Transactional！
       2. 目前    Atomikos 的实现只针对 Mysql 数据库！
  </description>

  <!-- 使用 Annotation 定义事务 -->   
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />   
  <tx:jta-transaction-manager />
  
  <bean id="dataBase_conf" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" lazy-init="true">
    <property name="pinGlobalTxToPhysicalConnection" value="true" />
    <property name="user" value="${conf.jdbc.username}" />
    <property name="password" value="${conf.jdbc.password}" />
    <property name="url" value="${conf.jdbc.url}?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true" />
  </bean>

  <bean id="dataBase_data" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" lazy-init="true">
    <property name="pinGlobalTxToPhysicalConnection" value="true" />
    <property name="user" value="${data.jdbc.username}" />
    <property name="password" value="${data.jdbc.password}" />
    <property name="url" value="${data.jdbc.url}?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true" />
  </bean>

  <bean id="realDataSource_conf" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="realDataSource_conf" />
    <property name="xaDataSource" ref="dataBase_conf" />
    <property name="poolSize" value="5" />
    <property name="maxPoolSize" value="10"/>
    <property name="maxLifetime" value="3600"/><!-- 3600 seconds(1hour) -->
    <property name="testQuery" value="SELECT 1" />
  </bean>

  <bean id="realDataSource_data" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
    <property name="uniqueResourceName" value="realDataSource_data" />
    <property name="xaDataSource" ref="dataBase_data" />
    <property name="poolSize" value="5" />
    <property name="maxPoolSize" value="10"/>
    <property name="maxLifetime" value="3600"/><!-- 3600 seconds(1hour) -->
    <property name="testQuery" value="SELECT 1" />
  </bean>
  
  <bean id="dataSource_conf" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
    <constructor-arg name="realDataSource" ref="realDataSource_conf" />
  </bean>
  
  <bean id="dataSource_data" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
    <constructor-arg name="realDataSource" ref="realDataSource_data" />
  </bean>

  <bean id="multipleDataSource" class="org.javaweb.showcase.interceptor.MultipleDataSource">
    <property name="defaultTargetDataSource" ref="dataSource_conf"/>
    <property name="targetDataSources">
      <map>     
        <entry key="dataSource_conf" value-ref="dataSource_conf" />
        <entry key="dataSource_data" value-ref="dataSource_data" />
      </map>   
    </property>
  </bean>

  <bean id="sessionConfiguration" class="org.apache.ibatis.session.Configuration">
    <property name="mapUnderscoreToCamelCase" value="true" />
    <property name="cacheEnabled" value="true" />
  </bean>
      
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="multipleDataSource" />
    <property name="configuration" ref="sessionConfiguration" />
    <!-- 
    <property name="configLocation" value="classpath*:/cfg/mybatis-cfg.xml"/>
     -->
    <property name="mapperLocations" value="classpath:org/javaweb/showcase/dao/mybatis/mapper/**/*.xml" />
  </bean>
  
  <!-- 
  <bean id="sessionFactory_data" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource_data" />
    <property name="configuration" ref="sessionConfiguration" />
    <property name="configLocation" value="classpath*:/cfg/mybatis-cfg.xml"/>    
    <property name="mapperLocations" value="classpath*:/org/javaweb/showcase/dao/mybatis/mapper/**/*.xml" />
  </bean>
   -->
  
  <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
    <property name="forceShutdown" value="false" />
    <property name="transactionTimeout" value="60" />
  </bean>

  <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.J2eeUserTransaction">
    <property name="transactionTimeout" value="60" />
  </bean>

  <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"
        depends-on="atomikosTransactionManager,atomikosUserTransaction">
    <property name="transactionManager" ref="atomikosTransactionManager" />
    <property name="userTransaction" ref="atomikosUserTransaction" />
    <property name="allowCustomIsolationLevels" value="true" />
  </bean>
  
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="sqlSessionFactory" />
    <constructor-arg index="1" value="BATCH" />
  </bean>
  
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="org.javaweb.showcase.dao.base,org.javaweb.showcase.dao.conf,org.javaweb.showcase.dao.data" />
    <property name="markerInterface" value="org.javaweb.showcase.dao.BaseDao"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <!-- 
    <property name="sqlSessionTemplateBeanName" value="sqlSession"/>
     -->
  </bean>
  
  <!-- 
  <bean id="sqlSession_data" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="sessionFactory_data" />
    <constructor-arg index="1" value="BATCH" />
  </bean>
   -->
  
  <!-- 
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="org.javaweb.showcase.dao.*Dao" />
    <property name="markerInterface" value="org.javaweb.showcase.dao.BaseDaoInterface"/>
    <property name="sqlSessionFactoryBeanName" value="sessionFactory_data"/>
    <property name="sqlSessionTemplateBeanName" value="sqlSession_data"/>
  </bean>
   -->
  
  <!-- <jee:jndi-lookup id="dataSource" jndi-name="jdbc/dataSource"></jee:jndi-lookup> -->

  <!-- 
  <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
    <jdbc:script location="classpath:/script/db/ddl/${database}/*.sql" />
    <jdbc:script location="classpath:/script/db/init/${database}/*.sql" />
  </jdbc:initialize-database>
   -->
  
  <!-- JSR303 Validator定义 -->
  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

  <!-- 
  <bean id="methodBeforeAOPInterceptor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"> 
    <property name="advice"> 
      <bean class="org.javaweb.showcase.interceptor.MethodBeforeAOPInterceptor"></bean> 
    </property> 
    <property name="patterns"> 
      <list> 
        <value>*</value> 
      </list> 
    </property> 
  </bean>
  
  <bean id="aopService" class="org.springframework.aop.framework.ProxyFactoryBean"> 
    <property name="interceptorNames"> 
      <list> 
        <value>methodBeforeAOPInterceptor</value> 
      </list> 
    </property>
  </bean>
   -->
   
  <!--   
  <aop:aspectj-autoproxy proxy-target-class="true"/>
  <aop:scoped-proxy proxy-target-class="false" />
   -->   
  <aop:scoped-proxy proxy-target-class="false" /> 
    
  <bean id="dataSourceMethodInterceptor" class="org.javaweb.showcase.interceptor.MultipleDataSourceInterceptor" />    
  
  <aop:config proxy-target-class="false">    
    <aop:pointcut id="dataSourceMethodPointcut"
                  expression="execution(* org.javaweb.**.dao.base.*Dao.*(..)) || 
                              execution(* org.javaweb.**.dao.conf.*Dao.*(..)) || 
                              execution(* org.javaweb.**.dao.data.*Dao.*(..))" />
    <aop:advisor advice-ref="dataSourceMethodInterceptor" pointcut-ref="dataSourceMethodPointcut"/>
  </aop:config>
  
  
</beans>